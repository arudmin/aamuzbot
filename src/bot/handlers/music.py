"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π.
"""

import re
from aiogram import Router, F
from aiogram.types import Message
from loguru import logger
from aiogram.filters import Command
from bot.config.config import config
from bot.services.music import music_service
from bot.utils.downloader import download_and_send_track
from bot.utils.formatting import format_search_results

router = Router()

@router.message(Command(commands=["music"]))
async def cmd_music_help(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = (
        "<b>üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö: @aamuzbot –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ /search –Ω–∞–∑–≤–∞–Ω–∏–µ - –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤\n"
        "‚Ä¢ /music - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(help_text, parse_mode="HTML")

@router.message(F.text.regexp(r"^/download_(\d+)$"))
async def cmd_download(message: Message) -> None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –ø–æ ID."""
    match = re.match(r"^/download_(\d+)$", message.text)
    if not match:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return
        
    track_id = match.group(1)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {message.text}")
    
    await download_and_send_track(message, track_id)

@router.message(Command(commands=["search"]))
async def cmd_search(message: Message) -> None:
    """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    query = message.text.replace("/search", "").strip()
    if not query:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return
        
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        status = await message.answer("üîç –ò—â—É —Ç—Ä–µ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await message.bot.get_me()
        
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏
        tracks = await music_service.search_track(query, limit=5, fetch_download_info=False)
        if not tracks:
            await status.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response_text = format_search_results(tracks, bot_info.username)
        await status.edit_text(response_text, parse_mode="HTML", disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤: {e}", exc_info=True)
        await status.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

@router.message(~F.text.startswith('/') & ~F.via_bot)
async def handle_text_search(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        status = await message.answer("üîç –ò—â—É —Ç—Ä–µ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await message.bot.get_me()
        
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏
        tracks = await music_service.search_track(message.text, limit=5, fetch_download_info=False)
        if not tracks:
            await status.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response_text = format_search_results(tracks, bot_info.username)
        await status.edit_text(response_text, parse_mode="HTML", disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤: {e}", exc_info=True)
        await status.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}") 