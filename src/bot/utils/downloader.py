"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram Bot API.
"""

import os
import tempfile
import aiohttp
import mutagen
from loguru import logger
from aiogram.types import Message, FSInputFile
from typing import Optional, Union
from bot.services.music import music_service
import re


def sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    
    Args:
        filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = re.sub(r'_+', '_', filename)
    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    filename = filename.strip('_')
    return filename


async def download_and_send_track(
    message: Message,
    track_id: Union[int, str],
    status_message: Optional[Message] = None
) -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        track_id: ID —Ç—Ä–µ–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
        status_message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ —Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if not status_message:
            status_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ...")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        track_info = await music_service.get_track_full_info(track_id)
        if not track_info:
            await status_message.edit_text("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
        track_str = f"{track_info['title']} - {', '.join(track_info['artists'])}"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        download_link = track_info.get('download_link')
        if not download_link:
            await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫–∞:\n{track_str}")
            return False

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        filename = f"{track_info['title']} - {', '.join(track_info['artists'])}.mp3"
        # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        safe_filename = sanitize_filename(filename)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        temp_dir = tempfile.gettempdir()
        temp_file = os.path.join(temp_dir, safe_filename)

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await status_message.edit_text(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫:\n{track_str}")

            async with aiohttp.ClientSession() as session:
                async with session.get(download_link) as response:
                    if response.status != 200:
                        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞:\n{track_str}")
                        return False

                    content = await response.read()
                    with open(temp_file, 'wb') as f:
                        f.write(content)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            await status_message.edit_text(f"üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:\n{track_str}")

            audio = mutagen.File(temp_file)
            if audio:
                audio['title'] = track_info['title']
                audio['artist'] = ", ".join(track_info['artists'])
                audio.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await status_message.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª:\n{track_str}")

            audio_file = FSInputFile(temp_file, filename=safe_filename)
            await message.answer_audio(
                audio_file,
                title=track_info['title'],
                performer=", ".join(track_info['artists']),
                duration=track_info['duration_ms'] // 1000
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file):
                os.unlink(temp_file)
                logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file} —É–¥–∞–ª–µ–Ω")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await status_message.delete()

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ {track_str}: {str(e)}", exc_info=True)
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:\n{track_str}\n\n{str(e)}")
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ {track_id}: {str(e)}", exc_info=True)
        if status_message:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ {track_id}:\n{str(e)}")
        return False 