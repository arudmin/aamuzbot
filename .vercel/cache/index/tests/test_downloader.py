"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
–º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

import pytest
from unittest.mock import Mock, AsyncMock, patch, ANY
from aiogram.types import Message, User, Chat, FSInputFile
from bot.utils.downloader import download_and_send_track


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    message = Mock(spec=Message)
    message.answer = AsyncMock()
    message.answer_audio = AsyncMock()
    message.from_user = Mock(spec=User, id=12345, username="testuser")
    message.chat = Mock(spec=Chat, id=12345)
    return message


@pytest.fixture
def mock_status_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    message = Mock(spec=Message)
    message.edit_text = AsyncMock()
    message.delete = AsyncMock()
    return message


@pytest.fixture
def mock_music_service():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."""
    service = Mock()
    service.get_track_full_info = AsyncMock()
    service.get_track_download_info = AsyncMock()
    return service


@pytest.mark.asyncio
async def test_download_and_send_track_success(mock_message, mock_status_message, mock_music_service):
    """
    –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    track_info = {
        'id': '123',
        'title': 'Test Track',
        'artists': ['Test Artist'],
        'duration_ms': 180000,
        'track_link': 'https://music.yandex.ru/track/123',
        'download_link': 'https://test.com/track.mp3'
    }
    mock_music_service.get_track_full_info.return_value = track_info

    # –ú–æ–∫–∞–µ–º aiohttp.ClientSession
    mock_response = AsyncMock()
    mock_response.status = 200
    mock_response.read = AsyncMock(return_value=b'fake_mp3_data')
    mock_session = AsyncMock()
    mock_session.get = AsyncMock(return_value=mock_response)
    mock_session.__aenter__ = AsyncMock(return_value=mock_session)
    mock_session.__aexit__ = AsyncMock()

    # –ú–æ–∫–∞–µ–º mutagen.File
    mock_audio = Mock()
    mock_audio.__setitem__ = Mock()
    mock_audio.save = Mock()

    with patch('bot.utils.downloader.music_service', mock_music_service), \
         patch('aiohttp.ClientSession', return_value=mock_session), \
         patch('mutagen.File', return_value=mock_audio), \
         patch('tempfile.gettempdir', return_value='/tmp'), \
         patch('os.path.exists', return_value=True), \
         patch('os.unlink'):

        result = await download_and_send_track(mock_message, '123', mock_status_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤
        mock_music_service.get_track_full_info.assert_called_once_with('123')
        mock_status_message.edit_text.assert_any_call("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫...")
        mock_status_message.edit_text.assert_any_call("üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ...")
        mock_status_message.edit_text.assert_any_call("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ answer_audio —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_message.answer_audio.assert_called_once()
        call_args = mock_message.answer_audio.call_args
        assert isinstance(call_args[0][0], FSInputFile)
        assert call_args[1]['title'] == 'Test Track'
        assert call_args[1]['performer'] == 'Test Artist'
        assert call_args[1]['duration'] == 180
        
        mock_status_message.delete.assert_called_once()


@pytest.mark.asyncio
async def test_download_and_send_track_not_found(mock_message, mock_status_message, mock_music_service):
    """
    –¢–µ—Å—Ç —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é,
    –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    mock_music_service.get_track_full_info.return_value = None

    with patch('bot.utils.downloader.music_service', mock_music_service):
        result = await download_and_send_track(mock_message, '123', mock_status_message)

        assert result is False
        mock_status_message.edit_text.assert_called_once_with("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@pytest.mark.asyncio
async def test_download_and_send_track_download_error(mock_message, mock_status_message, mock_music_service):
    """
    –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏,
    –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.
    """
    track_info = {
        'id': '123',
        'title': 'Test Track',
        'artists': ['Test Artist'],
        'duration_ms': 180000,
        'track_link': 'https://music.yandex.ru/track/123'
    }
    mock_music_service.get_track_full_info.return_value = track_info

    with patch('bot.utils.downloader.music_service', mock_music_service):
        result = await download_and_send_track(mock_message, '123', mock_status_message)

        assert result is False
        mock_status_message.edit_text.assert_called_with("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")


@pytest.mark.asyncio
async def test_download_and_send_track_http_error(mock_message, mock_status_message, mock_music_service):
    """
    –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ HTTP –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ HTTP,
    –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.
    """
    track_info = {
        'id': '123',
        'title': 'Test Track',
        'artists': ['Test Artist'],
        'duration_ms': 180000,
        'track_link': 'https://music.yandex.ru/track/123',
        'download_link': 'https://test.com/track.mp3'
    }
    mock_music_service.get_track_full_info.return_value = track_info

    # –ú–æ–∫–∞–µ–º aiohttp.ClientSession —Å –æ—à–∏–±–∫–æ–π
    mock_response = AsyncMock()
    mock_response.status = 404
    mock_session = AsyncMock()
    mock_session.get = AsyncMock(return_value=mock_response)
    mock_session.__aenter__ = AsyncMock(return_value=mock_session)
    mock_session.__aexit__ = AsyncMock()

    with patch('bot.utils.downloader.music_service', mock_music_service), \
         patch('aiohttp.ClientSession', return_value=mock_session):

        result = await download_and_send_track(mock_message, '123', mock_status_message)

        assert result is False
        mock_status_message.edit_text.assert_called_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞") 