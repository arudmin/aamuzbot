"""
–¢–µ—Å—Ç—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥,
—Ç–∞–∫–∏–µ –∫–∞–∫ /start –∏ /help.
"""

import pytest
from unittest.mock import Mock, patch, AsyncMock
from aiogram.types import Message, User, Chat
from bot.handlers.base import cmd_start, cmd_help


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    message = Mock(spec=Message)
    message.answer = AsyncMock()
    message.delete = AsyncMock()
    message.from_user = Mock(spec=User, id=12345, username="testuser")
    message.chat = Mock(spec=Chat, id=12345)
    return message


@pytest.mark.asyncio
async def test_cmd_start_without_args(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
    mock_message.text = "/start"
    
    await cmd_start(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    mock_message.answer.assert_called_once()
    args, kwargs = mock_message.answer.call_args
    welcome_text = args[0]
    assert "üëã –ü—Ä–∏–≤–µ—Ç!" in welcome_text
    assert "parse_mode" in kwargs
    assert kwargs["parse_mode"] == "HTML"


@pytest.mark.asyncio
async def test_cmd_start_with_download(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    mock_message.text = "/start download_123"
    
    # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    with patch('bot.handlers.base.download_and_send_track', AsyncMock()) as mock_download:
        await cmd_start(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        mock_download.assert_called_once_with(mock_message, "123")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
        mock_message.delete.assert_called_once()


@pytest.mark.asyncio
async def test_cmd_start_with_invalid_download(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    mock_message.text = "/start download_invalid"
    
    # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
    with patch('bot.handlers.base.download_and_send_track', AsyncMock(side_effect=Exception("Test error"))):
        await cmd_start(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        mock_message.answer.assert_called_with("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞")


@pytest.mark.asyncio
async def test_cmd_help(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help."""
    await cmd_help(mock_message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞
    mock_message.answer.assert_called_once()
    args, kwargs = mock_message.answer.call_args
    help_text = args[0]
    assert "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã" in help_text
    assert "parse_mode" in kwargs
    assert kwargs["parse_mode"] == "HTML"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ —Å–ø—Ä–∞–≤–∫–µ
    assert "/start" in help_text
    assert "/help" in help_text
    assert "/music" in help_text
    assert "/search" in help_text 