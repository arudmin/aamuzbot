"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Telegram –±–æ—Ç–µ.
–û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ–±–º–µ–Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏
–ø—Ä—è–º–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é inline-—Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
    –î–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å inline-—Ä–µ–∂–∏–º –≤ BotFather.
"""

from aiogram import Router, F
from aiogram.types import (
    InlineQuery, 
    InlineQueryResultArticle, 
    InputTextMessageContent
)
from bot.services.music import music_service
from bot.utils.formatting import format_duration, format_track_message
import hashlib
import asyncio
from loguru import logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
router = Router()


@router.inline_query()
async def inline_search(query: InlineQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏.
    
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤,
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ö–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    –æ —Ç—Ä–µ–∫–µ –∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        query (InlineQuery): Inline-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram —á–µ—Ä–µ–∑ query.answer()
    """
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω inline-–∑–∞–ø—Ä–æ—Å: {query.query}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ–¥—Å–∫–∞–∑–∫–∏
        if not query.query:
            empty_result = InlineQueryResultArticle(
                id="empty",
                title="–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏",
                description="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                input_message_content=InputTextMessageContent(
                    message_text="–î–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
                )
            )
            await query.answer([empty_result], cache_time=1)
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            return

        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤...")
            tracks = await asyncio.wait_for(
                music_service.search_track(query.query, limit=10, fetch_download_info=False),
                timeout=10.0
            )
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")
        except asyncio.TimeoutError:
            logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞")
            timeout_result = InlineQueryResultArticle(
                id="timeout",
                title="–ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                input_message_content=InputTextMessageContent(
                    message_text="‚ö†Ô∏è –ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            )
            await query.answer([timeout_result], cache_time=1)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await query.bot.get_me()
        bot_username = bot_info.username
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        results = []
        for track in tracks:
            try:
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–∞: {track}")
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ç—Ä–µ–∫–∞
                result_id = hashlib.md5(str(track['id']).encode()).hexdigest()
                logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result_id}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
                artists = ", ".join(track['artists'])
                duration_str = format_duration(track['duration_ms'])
                message_text = format_track_message(track, bot_username)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º inline-–∑–∞–ø—Ä–æ—Å–∞
                result = InlineQueryResultArticle(
                    id=result_id,
                    title=f"üéµ {track['title']}",
                    description=f"{artists} ‚Ä¢ {duration_str}",
                    input_message_content=InputTextMessageContent(
                        message_text=message_text,
                        disable_web_page_preview=True,
                        parse_mode="HTML"
                    )
                )
                results.append(result)
                logger.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ {track.get('id', 'Unknown')}: {e}", exc_info=True)
                continue
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        await query.answer(results, cache_time=300)
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ inline_search: {e}", exc_info=True)
        error_result = InlineQueryResultArticle(
            id="error",
            title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            input_message_content=InputTextMessageContent(
                message_text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
            )
        )
        await query.answer([error_result], cache_time=1) 